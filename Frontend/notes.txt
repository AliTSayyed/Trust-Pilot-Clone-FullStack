(Creating a project, making modules, creating components in those modules, and setting up routing)

- I started the angular project by running ng new (projectname) 
- Next I created the essential modules with ng generate module modules/(module name). These modules will be in the src/app/ folder
- Create a component in the module with ng generate component modules/(module name)/(component name). Set --standalone=false if i want the component to be dependent only on the modules dependencies. 
- If the component is not standalone declare them in the (module name).modules.ts file.
- Next i set up the routing for certain components (specifically the feature components since they are the main pages to be displayed)
- in moudle routing ie. url: '/feature-module-path/component-path' is set up in the (module name)-routing.module.ts file.  
    Ex: const routes: Routes = [{
    path:'',
    component: HomeComponent
  }]

- then go to the app.routes to set up the path name to the module itself.
    Ex: export const routes: Routes = [{
    path: '',
    loadChildren: () => 
      import('./modules/feature/feature.module').then(
        (m) => m.FeatureModule
      )
  }]

- in the examples above the HomeComponent is set to the deafult path '/' so that users immediately arrive on that page. 

- next, if i want to create components for another module that is not meant to be a main page, such as the shared module which contians things like the header, footer, etc. I need to create them in a new module like before.
- if standalone is true, then no need to delcare the component in the (module name)-routing.module.ts file. 
- Go to the component and change its html and scss to what you want. 
- Then go to to the (module name).module.ts file and import the component (since stand alone was true it must be imported). Then export the component.
- Go to app.components.ts and import the exported components (header and footer in this case).
- Since I always want the header and footer to appear, i can simply put these components on the app.component.html and they will always appear no matter the route. 
  Ex: 
    <!-- Header -->
    <app-header></app-header>

    <!--Wrapper-->
    <router-outlet></router-outlet> 

    <!-- Footer -->
    <app-footer></app-footer>

- app.component.ts is what appears on the screen. you can choose what is displayed on the screen my modifying the html of app.component OR you set the app.routes.ts  TO SHOW SPECIFIC COMPONENTS YOU WANT BASED ON A PATH A USER IS ON.

(Fethcing Data From the Backend)

